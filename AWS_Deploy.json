{
  "Description": "Hello World stack",
  "Parameters": {
    "Environment": {
      "Default": "hello-world",
      "Description": "The Hello World Project",
      "Type": "String",
      "AllowedValues": ["prod", "hello-world"]
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
    },
    "SSHLocation" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "InstanceType" : {
      "Description" : "WebServer Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ServerCount" : {
      "Description" : "Number of EC2 instances to launch for the WebServer server",
      "Type" : "Number",
      "Default" : "2"
    }
  },
  "Mappings": {
    "RegionDetails": {
      "ca-central-1": {
        "AvailabilityZone1": "ca-central-1a",
        "AvailabilityZone2": "ca-central-1b",
        "VPCCIDR": "10.0.0.0/16",
        "PublicCIDR1": "10.0.1.0/24",
        "PublicCIDR2": "10.0.2.0/24",
        "PrivateCIDR1": "10.0.3.0/24",
        "PrivateCIDR2": "10.0.4.0/24",
        "HelloWorldAMI": "ami-07ab3281411d31d04"
      }
    }
  },
  "Resources": {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"VPCCIDR"]},
        "EnableDnsHostnames": true,
        "Tags": [
          { "Key": "environment", "Value": {"Ref": "Environment" } },
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"AvailabilityZone1"]},
        "CidrBlock": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"PublicCIDR1"]},
        "MapPublicIpOnLaunch": true,
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"AvailabilityZone2"]},
        "CidrBlock": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"PublicCIDR2"]},
        "MapPublicIpOnLaunch": true,
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"AvailabilityZone1"]},
        "CidrBlock": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"PrivateCIDR1"]},
        "MapPublicIpOnLaunch": false,
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"AvailabilityZone2"]},
        "CidrBlock": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"PrivateCIDR2"]},
        "MapPublicIpOnLaunch": false,
        "VpcId": {"Ref": "VPC"}
      }
    },
    "NAT1" : {
      "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet1"},
        "Tags" : [ {"Key" : "NatGateway", "Value" : "Private" } ]
      }
    },
    "EIP" : {
      "DependsOn" : "GatewayToInternet",
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "VPC"
      }
    },
    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT1" }
      }
    },
    "PrivateSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "PrivateSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PublicSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicNetworkAcl" : {
    "Type" : "AWS::EC2::NetworkAcl",
    "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
      "Tags" : [
        { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
        { "Key" : "Network", "Value" : "Public" }
      ]
     }
    },
    "PrivateNetworkAcl" : {
    "Type" : "AWS::EC2::NetworkAcl",
    "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
      "Tags" : [
        { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
        { "Key" : "Network", "Value" : "Private" }
      ]
     }
    },
    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },
    "InboundDynamicPortPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },
    "InboundSSHPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"VPCCIDR"]},
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },
    "InboundSSHPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "SSHLocation" },
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },
    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },
    "OutboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },
    "PrivateSubnetNetworkAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },
    "PrivateSubnetNetworkAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },
    "PublicSubnetNetworkAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
    "PublicSubnetNetworkAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
    "PublicApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : [ { "Ref" : "PublicSubnet1"}, { "Ref" : "PublicSubnet2" } ],
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ]
      }
    },
    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "PublicApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },
    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 90,
        "HealthCheckTimeoutSeconds" : 60,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VPC"}
      }
    },
    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ]
      }
    },
    "PrivateSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "All ports from our internal CIDR only",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": -1,
            "CidrIp": {"Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"},"VPCCIDR"]}
          }
        ]
      }
    },
    "HelloWorldAG" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet1" } , { "Ref" : "PublicSubnet2" } ] ,
          "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
          "MinSize" : "2",
          "MaxSize" : "10",
          "DesiredCapacity" : { "Ref" : "ServerCount" },
          "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
          "Tags" : [ { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" } ],
          "NotificationConfiguration" : {
            "TopicARN" : { "Ref" : "NotificationTopic" },
            "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                    "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                    "autoscaling:EC2_INSTANCE_TERMINATE",
                                    "autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]
          }
        },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : { "Ref" : "ServerCount" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
      "LaunchConfig" : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {
              "packages" : {
                "yum" : {
                  "httpd" : [],
                  "php" : []
                }
              },
            "files" : {
              "/var/www/html/index.php" : {
                "content" : { "Fn::Join" : ["", [
                "<html>\n",
                "  <head>\n",
                "    <title>AWS CloudFormation Hello World</title>\n",
                "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                "  </head>\n",
                "  <body>\n",
                "    <h1>Hello World!!!</h1>\n",
                "    <p/>\n",
                "    <?php\n",
                "      // Print out the current data and time\n",
                "      print \"The Current Date and Time is: <br/>\";\n",
                "      print date(\"g:i A l, F j Y.\");\n",
                "    ?>\n",
                "    <p/>\n",
                "    <?php\n",
                "      // Setup a handle for CURL\n",
                "      $curl_handle=curl_init();\n",
                "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                "      // Get the hostname of the intance from the instance metadata\n",
                "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                "      $server = curl_exec($curl_handle);\n",
                "      $hostname = gethostname();\n",
                "      if (empty($hostname))\n",
                "      {\n",
                "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                "      }\n",
                "      else\n",
                "      {\n",
                "        print \"Hostname = \" . $hostname . \"<br />\";\n",
                "      }\n",
                "      if (empty($server))\n",
                "      {\n",
                "        print \"Sorry, for some reason, we got no Server ID back <br />\";\n",
                "      }\n",
                "      else\n",
                "      {\n",
                "        print \"Server ID = \" . $server . \"<br />\";\n",
                "      }\n",
                "      // Get the instance-id of the intance from the instance metadata\n",
                "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                "      $instanceid = curl_exec($curl_handle);\n",
                "      if (empty($instanceid))\n",
                "      {\n",
                "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                "      }\n",
                "      else\n",
                "      {\n",
                "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                "      }\n",
                "    ?>\n",
                "  </body>\n",
                "</html>\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "apache",
                "group"   : "apache"
              },
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
  		           "mode"    : "000400",
  		           "owner"   : "root",
                 "group"   : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : [ "/etc/httpd/conf.d/aptobackend.conf", "/var/www/html/index.php" ]},
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap": ["RegionDetails",{"Ref": "AWS::Region"}, "HelloWorldAMI" ]},
        "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "AssociatePublicIpAddress" : "true",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource LaunchConfig ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource HelloWorldAG ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },
    "ServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ,
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" } } ]
      }
    },
    "ScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "HelloWorldAG" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "HelloWorldAG" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },
    "ServerCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 60% for 1 minute",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "60",
        "AlarmActions": [
          {"Ref": "ScaleUpPolicy"}
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "HelloWorldAG" }
          }
        ]
      }
    },
    "ServerCPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 25% for 1 minute",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "ComparisonOperator": "LessThanThreshold",
        "Threshold": "25",
        "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
        "Dimensions": [
          {
          "Name": "AutoScalingGroupName",
          "Value": {"Ref": "HelloWorldAG"}
          }
        ]
    }
  }
},
"Outputs": {
    "URL" : {
      "Description": "Hello World Access",
      "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "PublicApplicationLoadBalancer", "DNSName" ]}]]}
    }
 }
}
